"打开tabline功能,方便查看Buffer和切换，这个功能比较不错"
"我还省去了minibufexpl插件，因为我习惯在1个Tab下用多个buffer"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

"设置切换Buffer快捷键"
nnoremap <C-G> :bn<CR>
nnoremap <C-B> :bp<CR>

" 关闭状态显示空白符号计数,这个对我用处不大"
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'

" enable/disable syntastic integration >
  let g:airline#extensions#syntastic#enabled = 1

" enable/disable tagbar integration >
  let g:airline#extensions#tagbar#enabled = 1
" change how tags are displayed (:help tagbar-statusline) >
  let g:airline#extensions#tagbar#flags = 'f'

" change how columns are displayed. >
  let g:airline#extensions#csv#column_display = 'Number'

" enable/disable showing a summary of changed hunks under source control. >
  let g:airline#extensions#hunks#enabled = 1

" enable/disable showing only non-zero hunks. >
  let g:airline#extensions#hunks#non_zero_only = 0

" set hunk count symbols. >
  let g:airline#extensions#hunks#hunk_symbols = ['+', '~', '-']
" enable/disable fugitive/lawrencium integration >
  let g:airline#extensions#branch#enabled = 1
" configure the title text for quickfix buffers >
  "let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'
" enable/disable bufferline integration >
  let g:airline#extensions#bufferline#enabled = 1
" determine whether bufferline will overwrite customization variables >
  let g:airline#extensions#bufferline#overwrite_variables = 1
" enable/disable fugitive/lawrencium integration >
  let g:airline#extensions#branch#enabled = 1
" change the text for when no branch is detected >
  let g:airline#extensions#branch#empty_message = ''
" truncate long branch names to a fixed length >
  let g:airline#extensions#branch#displayed_head_limit = 10
" to truncate all path sections but the last one, e.g. a branch
" 'foo/bar/baz' becomes 'f/b/baz', use
  "let g:airline#extensions#branch#format = 2"

" 一键获取当前编辑文件绝对路径
function GetCurFilePath()
    let cur_dir = getcwd()
    let cur_file_name = getreg('%')
    let cur_dir_file_name = cur_dir . '/' . cur_file_name
    call setreg("+", cur_dir_file_name)
endfunction
nnoremap <silent> <F9> : call GetCurFilePath()<cr>
"
" Vimmake 相关设置
let g:vimmake_mode = {}
let g:vimmake_mode['g++'] = 'async'
let g:vimmake_mode['run'] = 'normal'
" 异步方式后台启动gcc，并且将后台进程的输出实时重定向到界面下端的quickfix窗口
let g:vimmake_mode = { 'g++':'async', 'run':'normal'  }
" 编译时保存当前文件
let g:vimmake_save = 1
" 自动滚动quickfix窗
let g:vimmake_build_scroll = 1
noremap <F7> :VimTool g++<cr>
noremap <F5> :VimTool run<cr>
inoremap <F7> <ESC>:VimTool g++<cr>
inoremap <F5> <ESC>:VimTool run<cr>
noremap <F10> :silent call vimmake#Toggle_Quickfix()<cr>
inoremap <F10> <ESC>:silent call vimmake#Toggle_Quickfix()<cr>

let g:mkdp_path_to_chrome = "google-chrome"
" path to the chrome or the command to open chrome(or other modern browsers)

let g:mkdp_auto_start = 0
" set to 1, the vim will open the preview window once enter the markdown
" buffer

let g:mkdp_auto_open = 0
" set to 1, the vim will auto open preview window when you edit the
" markdown file

let g:mkdp_auto_close = 1
" set to 1, the vim will auto close current preview window when change
" from markdown buffer to another buffer

let g:mkdp_refresh_slow = 0
" set to 1, the vim will just refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor

let g:mkdp_command_for_global = 0
" set to 1, the MarkdownPreview command can be use for all files,
" by default it just can be use in markdown file

" 拼写检查
autocmd FileType tex setlocal spell spelllang=en_us,cjk

" 防止中文乱码
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
